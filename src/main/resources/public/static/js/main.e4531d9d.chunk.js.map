{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["PageState","App","useState","name","setName","attending","setAttending","sundayDate","setSundayDate","partySize","setPartySize","expirationDate","setExpirationDate","errorMessage","setErrorMessage","LOADING","pageState","setPageState","token","queryString","parse","window","location","search","t","useEffect","a","console","log","axios","result","data","READY","ERROR","response","fetch","updateResponse","put","content","Spinner","partySizeSlider","Row","Col","sm","className","value","onChange","e","handlePartySizeChange","target","min","max","tooltip","FormGroup","tag","style","fontSize","check","inline","Label","Input","type","checked","Alert","color","Jumbotron","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e4531d9d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Jumbotron, FormGroup, Label, Input, Row, Col, Spinner, Alert } from 'reactstrap';\nimport RangeSlider from 'react-bootstrap-range-slider';\nimport axios from 'axios';\nimport queryString from 'query-string';\n\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? '' : 'http://localhost:7777';\n\nenum PageState { LOADING, ERROR, READY }\n\nconst App = () => {\n  const [name, setName] = useState('');\n  const [attending, setAttending] = useState(false);\n  const [sundayDate, setSundayDate] = useState('');\n  const [partySize, setPartySize] = useState(1);\n  const [expirationDate, setExpirationDate] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const [pageState, setPageState] = useState(PageState.LOADING);\n\n  const { t: token } = queryString.parse(window.location.search);\n\n  useEffect(() => {\n    const fetch = async () => {\n      console.log('Retrieving response...');\n      try {\n        const result = await axios(`${API_BASE_URL}/responses/${token}`);\n        const { name, sundayDate, partySize, attending, expirationDate } = result.data;\n        console.log('(A)', partySize);\n        setName(name);\n        setSundayDate(sundayDate);\n        setPartySize(partySize);\n        setAttending(attending);\n        setExpirationDate(expirationDate);\n\n        setPageState(PageState.READY)\n      } catch (error) {\n        setPageState(PageState.ERROR)\n        if (error.response) {\n          setErrorMessage(error.response.data);\n        }\n      }\n    };\n\n    fetch();\n  }, [token]);\n\n  useEffect(() => {\n    const updateResponse = async () => {\n      console.log(`Updating response with [partySize=${partySize} attending=${attending}]...`);\n      try {\n        const result = await axios.put(`${API_BASE_URL}/responses/${token}`, {\n          partySize,\n          attending,\n        });\n        console.log(result);\n      } catch (error) {\n        setPageState(PageState.ERROR)\n        if (error.response) {\n          setErrorMessage(error.response.data);\n        }\n      }\n    };\n\n    if (pageState === PageState.READY) updateResponse();\n  }, [token, pageState, partySize, attending]);\n  \n\n  function handlePartySizeChange(partySize: number) {\n    console.log('(B)', partySize);\n    setPartySize(partySize);\n  }\n\n  let content = null;\n  if (pageState === PageState.LOADING) {\n    content = <Spinner />;\n  }\n  else if (pageState === PageState.READY) {\n    const partySizeSlider = attending && (\n      <Row>\n        <Col sm={4}>\n          <p className=\"lead\">How many people will be attending in your party, including yourself?</p>\n          <RangeSlider\n            value={partySize}\n            onChange={(e: React.ChangeEvent<any>) => handlePartySizeChange(e.target.value)}\n            min={1}\n            max={10}\n            tooltip=\"on\"\n          />\n        </Col>\n      </Row>\n    );\n\n    content = (\n      <div>\n        <p className=\"lead\">Hi <strong>{name}</strong>, will you be attending Immanuel Bible Church for outdoor worship service this coming <strong>Sunday, {sundayDate} at 9am</strong>?</p>\n      \n        <FormGroup tag=\"fieldset\" style={{ fontSize: '150%' }}>\n          <FormGroup check inline>\n            <Label check className=\"text-success\">\n              <Input type=\"radio\" name=\"radioAttending\" checked={attending} onChange={e => setAttending(true)} />{' '}\n              Yes\n            </Label>\n          </FormGroup>\n          <FormGroup check inline className=\"ml-4\">\n            <Label check className=\"text-danger\">\n              <Input type=\"radio\" name=\"radioAttending\" checked={!attending} onChange={e => setAttending(false)} />{' '}\n              No\n            </Label>\n          </FormGroup>\n        </FormGroup>\n\n        {partySizeSlider}\n\n        <Alert color=\"success\" className=\"mt-4\">Your response is automatically saved, so there's no need to do anything else. Thanks!</Alert>\n\n        {pageState === PageState.READY && (\n          <p className=\"mt-5 text-muted\">If you want make any changes to your response later, you can return to this page at any time before the deadline of <strong>{expirationDate}</strong>.</p>\n        )}\n      </div>\n    );\n  }\n  else {\n    content = <Alert color=\"danger\"><i className=\"\" /> {errorMessage || 'Oops! Something went wrong.'}</Alert>;\n  }\n\n\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1 className=\"display-4 mb-4\">IBC Sunday Seats</h1>\n        \n        {content}\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}